class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        for n in range(k):
            nums.insert(0,nums[-1])
            del nums[-1]
class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        k=k%len(nums)
        l,r=0,len(nums)-1
         while l<r:
            nums[l],nums[r]= nums[r],,nums[l]
            l,r=l+1,r-1
         l,r=0,k-1
         while l<r:
            nums[l],nums[r]= nums[r],,nums[l]
            l,r=l+1,r-1
         l,r=k,len(nums)-1
         while l<r:
            nums[l],nums[r]= nums[r],,nums[l]
            l,r=l+1,r-1
or 
class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        n = len(nums)
        k = k % n  # Handle cases where k is larger than the array length
         
        rotated = [0] * n  # Create a new array of the same length as nums
         
        for i in range(n):
             rotated[(i + k) % n] = nums[i]
         
        nums[:] = rotated  
